//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  menus: Menus;
  menusConnection: MenusConnection;
  config: Config;
  configConnection: ConfigConnection;
  subscription: Subscription;
  subscriptionConnection: SubscriptionConnection;
  home: Home;
  homeConnection: HomeConnection;
  home2: Home2;
  home2Connection: Home2Connection;
  home3: Home3;
  home3Connection: Home3Connection;
  about: About;
  aboutConnection: AboutConnection;
  author_page: Author_Page;
  author_pageConnection: Author_PageConnection;
  author: Author;
  authorConnection: AuthorConnection;
  blog: Blog;
  blogConnection: BlogConnection;
  portfolio: Portfolio;
  portfolioConnection: PortfolioConnection;
  categories: Categories;
  categoriesConnection: CategoriesConnection;
  tags: Tags;
  tagsConnection: TagsConnection;
  archive: Archive;
  archiveConnection: ArchiveConnection;
  contact: Contact;
  contactConnection: ContactConnection;
  privacy: Privacy;
  privacyConnection: PrivacyConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMenusArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMenusConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MenusFilter>;
};


export type QueryConfigArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryConfigConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConfigFilter>;
};


export type QuerySubscriptionArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySubscriptionConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SubscriptionFilter>;
};


export type QueryHomeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
};


export type QueryHome2Args = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHome2ConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Home2Filter>;
};


export type QueryHome3Args = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHome3ConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Home3Filter>;
};


export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
};


export type QueryAuthor_PageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthor_PageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Author_PageFilter>;
};


export type QueryAuthorArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthorConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorFilter>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryPortfolioArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPortfolioConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
};


export type QueryCategoriesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoriesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
};


export type QueryTagsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTagsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TagsFilter>;
};


export type QueryArchiveArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryArchiveConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ArchiveFilter>;
};


export type QueryContactArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContactConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
};


export type QueryPrivacyArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPrivacyConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PrivacyFilter>;
};

export type DocumentFilter = {
  menus?: InputMaybe<MenusFilter>;
  config?: InputMaybe<ConfigFilter>;
  subscription?: InputMaybe<SubscriptionFilter>;
  home?: InputMaybe<HomeFilter>;
  home2?: InputMaybe<Home2Filter>;
  home3?: InputMaybe<Home3Filter>;
  about?: InputMaybe<AboutFilter>;
  author_page?: InputMaybe<Author_PageFilter>;
  author?: InputMaybe<AuthorFilter>;
  blog?: InputMaybe<BlogFilter>;
  portfolio?: InputMaybe<PortfolioFilter>;
  categories?: InputMaybe<CategoriesFilter>;
  tags?: InputMaybe<TagsFilter>;
  archive?: InputMaybe<ArchiveFilter>;
  contact?: InputMaybe<ContactFilter>;
  privacy?: InputMaybe<PrivacyFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Menus | Config | Subscription | Home | Home2 | Home3 | About | Author_Page | Author | Blog | Portfolio | Categories | Tags | Archive | Contact | Privacy | Folder;

export type MenusMainMenuSubmenu = {
  __typename?: 'MenusMainMenuSubmenu';
  name: Scalars['String']['output'];
  link: Scalars['String']['output'];
  target?: Maybe<Scalars['String']['output']>;
  rel?: Maybe<Scalars['String']['output']>;
};

export type MenusMainMenu = {
  __typename?: 'MenusMainMenu';
  name: Scalars['String']['output'];
  link: Scalars['String']['output'];
  target?: Maybe<Scalars['String']['output']>;
  rel?: Maybe<Scalars['String']['output']>;
  submenu?: Maybe<Array<Maybe<MenusMainMenuSubmenu>>>;
};

export type MenusFooterMenu = {
  __typename?: 'MenusFooterMenu';
  name: Scalars['String']['output'];
  link: Scalars['String']['output'];
  target?: Maybe<Scalars['String']['output']>;
  rel?: Maybe<Scalars['String']['output']>;
};

export type Menus = Node & Document & {
  __typename?: 'Menus';
  mainMenu?: Maybe<Array<Maybe<MenusMainMenu>>>;
  footerMenu?: Maybe<Array<Maybe<MenusFooterMenu>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type MenusMainMenuSubmenuFilter = {
  name?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  target?: InputMaybe<StringFilter>;
  rel?: InputMaybe<StringFilter>;
};

export type MenusMainMenuFilter = {
  name?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  target?: InputMaybe<StringFilter>;
  rel?: InputMaybe<StringFilter>;
  submenu?: InputMaybe<MenusMainMenuSubmenuFilter>;
};

export type MenusFooterMenuFilter = {
  name?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  target?: InputMaybe<StringFilter>;
  rel?: InputMaybe<StringFilter>;
};

export type MenusFilter = {
  mainMenu?: InputMaybe<MenusMainMenuFilter>;
  footerMenu?: InputMaybe<MenusFooterMenuFilter>;
};

export type MenusConnectionEdges = {
  __typename?: 'MenusConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Menus>;
};

export type MenusConnection = Connection & {
  __typename?: 'MenusConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MenusConnectionEdges>>>;
};

export type ConfigLogo = {
  __typename?: 'ConfigLogo';
  src?: Maybe<Scalars['String']['output']>;
  src_light?: Maybe<Scalars['String']['output']>;
  alt?: Maybe<Scalars['String']['output']>;
  width?: Maybe<Scalars['Float']['output']>;
  height?: Maybe<Scalars['Float']['output']>;
};

export type ConfigMetadata = {
  __typename?: 'ConfigMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ConfigSettings = {
  __typename?: 'ConfigSettings';
  homepage_post_count?: Maybe<Scalars['Float']['output']>;
  pagination?: Maybe<Scalars['Float']['output']>;
  copyright?: Maybe<Scalars['String']['output']>;
  portfolio_post_page_amount?: Maybe<Scalars['Float']['output']>;
};

export type Config = Node & Document & {
  __typename?: 'Config';
  baseURL?: Maybe<Scalars['String']['output']>;
  favicon?: Maybe<Scalars['String']['output']>;
  basePath?: Maybe<Scalars['String']['output']>;
  trailingSlash?: Maybe<Scalars['Boolean']['output']>;
  logo?: Maybe<ConfigLogo>;
  metadata?: Maybe<ConfigMetadata>;
  settings?: Maybe<ConfigSettings>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ConfigLogoFilter = {
  src?: InputMaybe<ImageFilter>;
  src_light?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
};

export type ConfigMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type ConfigSettingsFilter = {
  homepage_post_count?: InputMaybe<NumberFilter>;
  pagination?: InputMaybe<NumberFilter>;
  copyright?: InputMaybe<StringFilter>;
  portfolio_post_page_amount?: InputMaybe<NumberFilter>;
};

export type ConfigFilter = {
  baseURL?: InputMaybe<StringFilter>;
  favicon?: InputMaybe<StringFilter>;
  basePath?: InputMaybe<StringFilter>;
  trailingSlash?: InputMaybe<BooleanFilter>;
  logo?: InputMaybe<ConfigLogoFilter>;
  metadata?: InputMaybe<ConfigMetadataFilter>;
  settings?: InputMaybe<ConfigSettingsFilter>;
};

export type ConfigConnectionEdges = {
  __typename?: 'ConfigConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Config>;
};

export type ConfigConnection = Connection & {
  __typename?: 'ConfigConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ConfigConnectionEdges>>>;
};

export type Subscription = Node & Document & {
  __typename?: 'Subscription';
  title?: Maybe<Scalars['String']['output']>;
  mailChimpFormAction?: Maybe<Scalars['String']['output']>;
  mailChimpFormName?: Maybe<Scalars['String']['output']>;
  formPlaceholder?: Maybe<Scalars['String']['output']>;
  formButtonLabel?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SubscriptionFilter = {
  title?: InputMaybe<StringFilter>;
  mailChimpFormAction?: InputMaybe<StringFilter>;
  mailChimpFormName?: InputMaybe<StringFilter>;
  formPlaceholder?: InputMaybe<StringFilter>;
  formButtonLabel?: InputMaybe<StringFilter>;
};

export type SubscriptionConnectionEdges = {
  __typename?: 'SubscriptionConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Subscription>;
};

export type SubscriptionConnection = Connection & {
  __typename?: 'SubscriptionConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SubscriptionConnectionEdges>>>;
};

export type HomeMetadata = {
  __typename?: 'HomeMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type HomeRecent_Posts = {
  __typename?: 'HomeRecent_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  button_label?: Maybe<Scalars['String']['output']>;
};

export type Home = Node & Document & {
  __typename?: 'Home';
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<HomeMetadata>;
  recent_posts?: Maybe<HomeRecent_Posts>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HomeMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type HomeRecent_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  button_label?: InputMaybe<StringFilter>;
};

export type HomeFilter = {
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<HomeMetadataFilter>;
  recent_posts?: InputMaybe<HomeRecent_PostsFilter>;
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Home>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type Home2Metadata = {
  __typename?: 'Home2Metadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Home2Social_Links = {
  __typename?: 'Home2Social_links';
  enable?: Maybe<Scalars['Boolean']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  facebook?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
};

export type Home2Recent_Posts = {
  __typename?: 'Home2Recent_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  button_label?: Maybe<Scalars['String']['output']>;
};

export type Home2 = Node & Document & {
  __typename?: 'Home2';
  metadata?: Maybe<Home2Metadata>;
  image?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  banner_button_label?: Maybe<Scalars['String']['output']>;
  social_links?: Maybe<Home2Social_Links>;
  recent_posts?: Maybe<Home2Recent_Posts>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Home2MetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type Home2Social_LinksFilter = {
  enable?: InputMaybe<BooleanFilter>;
  twitter?: InputMaybe<StringFilter>;
  facebook?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
};

export type Home2Recent_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  button_label?: InputMaybe<StringFilter>;
};

export type Home2Filter = {
  metadata?: InputMaybe<Home2MetadataFilter>;
  image?: InputMaybe<ImageFilter>;
  subtitle?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  banner_button_label?: InputMaybe<StringFilter>;
  social_links?: InputMaybe<Home2Social_LinksFilter>;
  recent_posts?: InputMaybe<Home2Recent_PostsFilter>;
};

export type Home2ConnectionEdges = {
  __typename?: 'Home2ConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Home2>;
};

export type Home2Connection = Connection & {
  __typename?: 'Home2Connection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Home2ConnectionEdges>>>;
};

export type Home3Metadata = {
  __typename?: 'Home3Metadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Home3Featured_Posts = {
  __typename?: 'Home3Featured_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type Home3Recent_Posts = {
  __typename?: 'Home3Recent_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  button_label?: Maybe<Scalars['String']['output']>;
};

export type Home3 = Node & Document & {
  __typename?: 'Home3';
  metadata?: Maybe<Home3Metadata>;
  featured_posts?: Maybe<Home3Featured_Posts>;
  recent_posts?: Maybe<Home3Recent_Posts>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Home3MetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type Home3Featured_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
};

export type Home3Recent_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  button_label?: InputMaybe<StringFilter>;
};

export type Home3Filter = {
  metadata?: InputMaybe<Home3MetadataFilter>;
  featured_posts?: InputMaybe<Home3Featured_PostsFilter>;
  recent_posts?: InputMaybe<Home3Recent_PostsFilter>;
};

export type Home3ConnectionEdges = {
  __typename?: 'Home3ConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Home3>;
};

export type Home3Connection = Connection & {
  __typename?: 'Home3Connection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Home3ConnectionEdges>>>;
};

export type AboutMetadata = {
  __typename?: 'AboutMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type AboutIntroImages = {
  __typename?: 'AboutIntroImages';
  src?: Maybe<Scalars['String']['output']>;
  width?: Maybe<Scalars['Float']['output']>;
  height?: Maybe<Scalars['Float']['output']>;
  grid_class?: Maybe<Scalars['String']['output']>;
};

export type AboutIntro = {
  __typename?: 'AboutIntro';
  title?: Maybe<Scalars['String']['output']>;
  images?: Maybe<Array<Maybe<AboutIntroImages>>>;
  description?: Maybe<Scalars['String']['output']>;
};

export type AboutOur_Writers = {
  __typename?: 'AboutOur_writers';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type About = Node & Document & {
  __typename?: 'About';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<AboutMetadata>;
  intro?: Maybe<AboutIntro>;
  our_writers?: Maybe<AboutOur_Writers>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AboutMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type AboutIntroImagesFilter = {
  src?: InputMaybe<ImageFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
  grid_class?: InputMaybe<StringFilter>;
};

export type AboutIntroFilter = {
  title?: InputMaybe<StringFilter>;
  images?: InputMaybe<AboutIntroImagesFilter>;
  description?: InputMaybe<StringFilter>;
};

export type AboutOur_WritersFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
};

export type AboutFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<AboutMetadataFilter>;
  intro?: InputMaybe<AboutIntroFilter>;
  our_writers?: InputMaybe<AboutOur_WritersFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type Author_PageMetadata = {
  __typename?: 'Author_pageMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Author_Page = Node & Document & {
  __typename?: 'Author_page';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Author_PageMetadata>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type Author_PageMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type Author_PageFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<Author_PageMetadataFilter>;
};

export type Author_PageConnectionEdges = {
  __typename?: 'Author_pageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Author_Page>;
};

export type Author_PageConnection = Connection & {
  __typename?: 'Author_pageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<Author_PageConnectionEdges>>>;
};

export type Author = Node & Document & {
  __typename?: 'Author';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  image: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AuthorBodyAstroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
  caption?: InputMaybe<StringFilter>;
  class?: InputMaybe<StringFilter>;
};

export type AuthorBodyCalloutFilter = {
  title?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type AuthorBodyLinkPreviewFilter = {
  id?: InputMaybe<StringFilter>;
};

export type AuthorBodyYouTubeFilter = {
  id?: InputMaybe<StringFilter>;
};

export type AuthorBodyVimeoFilter = {
  id?: InputMaybe<StringFilter>;
};

export type AuthorBodyFilter = {
  AstroImage?: InputMaybe<AuthorBodyAstroImageFilter>;
  Callout?: InputMaybe<AuthorBodyCalloutFilter>;
  LinkPreview?: InputMaybe<AuthorBodyLinkPreviewFilter>;
  YouTube?: InputMaybe<AuthorBodyYouTubeFilter>;
  Vimeo?: InputMaybe<AuthorBodyVimeoFilter>;
};

export type AuthorFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<AuthorBodyFilter>;
};

export type AuthorConnectionEdges = {
  __typename?: 'AuthorConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Author>;
};

export type AuthorConnection = Connection & {
  __typename?: 'AuthorConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AuthorConnectionEdges>>>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  draft?: Maybe<Scalars['Boolean']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  date: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  author?: Maybe<Scalars['String']['output']>;
  categories: Array<Scalars['String']['output']>;
  tags: Array<Scalars['String']['output']>;
  image: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogBodyAstroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
  caption?: InputMaybe<StringFilter>;
  class?: InputMaybe<StringFilter>;
};

export type BlogBodyCalloutFilter = {
  title?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type BlogBodyLinkPreviewFilter = {
  id?: InputMaybe<StringFilter>;
};

export type BlogBodyYouTubeFilter = {
  id?: InputMaybe<StringFilter>;
};

export type BlogBodyVimeoFilter = {
  id?: InputMaybe<StringFilter>;
};

export type BlogBodyFilter = {
  AstroImage?: InputMaybe<BlogBodyAstroImageFilter>;
  Callout?: InputMaybe<BlogBodyCalloutFilter>;
  LinkPreview?: InputMaybe<BlogBodyLinkPreviewFilter>;
  YouTube?: InputMaybe<BlogBodyYouTubeFilter>;
  Vimeo?: InputMaybe<BlogBodyVimeoFilter>;
};

export type BlogFilter = {
  draft?: InputMaybe<BooleanFilter>;
  featured?: InputMaybe<BooleanFilter>;
  date?: InputMaybe<DatetimeFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  categories?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<BlogBodyFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type Portfolio = Node & Document & {
  __typename?: 'Portfolio';
  draft?: Maybe<Scalars['Boolean']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  date: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  author?: Maybe<Scalars['String']['output']>;
  categories: Array<Scalars['String']['output']>;
  tags: Array<Scalars['String']['output']>;
  image: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PortfolioBodyAstroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
  caption?: InputMaybe<StringFilter>;
  class?: InputMaybe<StringFilter>;
};

export type PortfolioBodyCalloutFilter = {
  title?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type PortfolioBodyLinkPreviewFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PortfolioBodyYouTubeFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PortfolioBodyVimeoFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PortfolioBodyFilter = {
  AstroImage?: InputMaybe<PortfolioBodyAstroImageFilter>;
  Callout?: InputMaybe<PortfolioBodyCalloutFilter>;
  LinkPreview?: InputMaybe<PortfolioBodyLinkPreviewFilter>;
  YouTube?: InputMaybe<PortfolioBodyYouTubeFilter>;
  Vimeo?: InputMaybe<PortfolioBodyVimeoFilter>;
};

export type PortfolioFilter = {
  draft?: InputMaybe<BooleanFilter>;
  featured?: InputMaybe<BooleanFilter>;
  date?: InputMaybe<DatetimeFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  categories?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<PortfolioBodyFilter>;
};

export type PortfolioConnectionEdges = {
  __typename?: 'PortfolioConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Portfolio>;
};

export type PortfolioConnection = Connection & {
  __typename?: 'PortfolioConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PortfolioConnectionEdges>>>;
};

export type CategoriesMetadata = {
  __typename?: 'CategoriesMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type CategoriesRecent_Posts = {
  __typename?: 'CategoriesRecent_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  visible_posts_count?: Maybe<Scalars['Float']['output']>;
  button_label?: Maybe<Scalars['String']['output']>;
};

export type Categories = Node & Document & {
  __typename?: 'Categories';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<CategoriesMetadata>;
  recent_posts?: Maybe<CategoriesRecent_Posts>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type CategoriesMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type CategoriesRecent_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  visible_posts_count?: InputMaybe<NumberFilter>;
  button_label?: InputMaybe<StringFilter>;
};

export type CategoriesFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<CategoriesMetadataFilter>;
  recent_posts?: InputMaybe<CategoriesRecent_PostsFilter>;
};

export type CategoriesConnectionEdges = {
  __typename?: 'CategoriesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Categories>;
};

export type CategoriesConnection = Connection & {
  __typename?: 'CategoriesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CategoriesConnectionEdges>>>;
};

export type TagsMetadata = {
  __typename?: 'TagsMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type TagsRecent_Posts = {
  __typename?: 'TagsRecent_posts';
  enable?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  visible_posts_count?: Maybe<Scalars['Float']['output']>;
  button_label?: Maybe<Scalars['String']['output']>;
};

export type Tags = Node & Document & {
  __typename?: 'Tags';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<TagsMetadata>;
  recent_posts?: Maybe<TagsRecent_Posts>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type TagsMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type TagsRecent_PostsFilter = {
  enable?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  visible_posts_count?: InputMaybe<NumberFilter>;
  button_label?: InputMaybe<StringFilter>;
};

export type TagsFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<TagsMetadataFilter>;
  recent_posts?: InputMaybe<TagsRecent_PostsFilter>;
};

export type TagsConnectionEdges = {
  __typename?: 'TagsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Tags>;
};

export type TagsConnection = Connection & {
  __typename?: 'TagsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<TagsConnectionEdges>>>;
};

export type ArchiveMetadata = {
  __typename?: 'ArchiveMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Archive = Node & Document & {
  __typename?: 'Archive';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<ArchiveMetadata>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ArchiveMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type ArchiveFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<ArchiveMetadataFilter>;
};

export type ArchiveConnectionEdges = {
  __typename?: 'ArchiveConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Archive>;
};

export type ArchiveConnection = Connection & {
  __typename?: 'ArchiveConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ArchiveConnectionEdges>>>;
};

export type ContactMetadata = {
  __typename?: 'ContactMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type ContactContact_Form = {
  __typename?: 'ContactContact_form';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  contact_info_title?: Maybe<Scalars['String']['output']>;
  email_address?: Maybe<Scalars['String']['output']>;
  phone_number?: Maybe<Scalars['String']['output']>;
  contact_email?: Maybe<Scalars['String']['output']>;
  form_button_text?: Maybe<Scalars['String']['output']>;
};

export type Contact = Node & Document & {
  __typename?: 'Contact';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<ContactMetadata>;
  contact_form?: Maybe<ContactContact_Form>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContactMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type ContactContact_FormFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  contact_info_title?: InputMaybe<StringFilter>;
  email_address?: InputMaybe<StringFilter>;
  phone_number?: InputMaybe<StringFilter>;
  contact_email?: InputMaybe<StringFilter>;
  form_button_text?: InputMaybe<StringFilter>;
};

export type ContactFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<ContactMetadataFilter>;
  contact_form?: InputMaybe<ContactContact_FormFilter>;
};

export type ContactConnectionEdges = {
  __typename?: 'ContactConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Contact>;
};

export type ContactConnection = Connection & {
  __typename?: 'ContactConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContactConnectionEdges>>>;
};

export type PrivacyMetadata = {
  __typename?: 'PrivacyMetadata';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  keywords?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Privacy = Node & Document & {
  __typename?: 'Privacy';
  draft?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<PrivacyMetadata>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PrivacyMetadataFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
  keywords?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type PrivacyBodyAstroImageFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  width?: InputMaybe<NumberFilter>;
  height?: InputMaybe<NumberFilter>;
  caption?: InputMaybe<StringFilter>;
  class?: InputMaybe<StringFilter>;
};

export type PrivacyBodyCalloutFilter = {
  title?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type PrivacyBodyLinkPreviewFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PrivacyBodyYouTubeFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PrivacyBodyVimeoFilter = {
  id?: InputMaybe<StringFilter>;
};

export type PrivacyBodyFilter = {
  AstroImage?: InputMaybe<PrivacyBodyAstroImageFilter>;
  Callout?: InputMaybe<PrivacyBodyCalloutFilter>;
  LinkPreview?: InputMaybe<PrivacyBodyLinkPreviewFilter>;
  YouTube?: InputMaybe<PrivacyBodyYouTubeFilter>;
  Vimeo?: InputMaybe<PrivacyBodyVimeoFilter>;
};

export type PrivacyFilter = {
  draft?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  metadata?: InputMaybe<PrivacyMetadataFilter>;
  body?: InputMaybe<PrivacyBodyFilter>;
};

export type PrivacyConnectionEdges = {
  __typename?: 'PrivacyConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Privacy>;
};

export type PrivacyConnection = Connection & {
  __typename?: 'PrivacyConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PrivacyConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateMenus: Menus;
  createMenus: Menus;
  updateConfig: Config;
  createConfig: Config;
  updateSubscription: Subscription;
  createSubscription: Subscription;
  updateHome: Home;
  createHome: Home;
  updateHome2: Home2;
  createHome2: Home2;
  updateHome3: Home3;
  createHome3: Home3;
  updateAbout: About;
  createAbout: About;
  updateAuthor_page: Author_Page;
  createAuthor_page: Author_Page;
  updateAuthor: Author;
  createAuthor: Author;
  updateBlog: Blog;
  createBlog: Blog;
  updatePortfolio: Portfolio;
  createPortfolio: Portfolio;
  updateCategories: Categories;
  createCategories: Categories;
  updateTags: Tags;
  createTags: Tags;
  updateArchive: Archive;
  createArchive: Archive;
  updateContact: Contact;
  createContact: Contact;
  updatePrivacy: Privacy;
  createPrivacy: Privacy;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateMenusArgs = {
  relativePath: Scalars['String']['input'];
  params: MenusMutation;
};


export type MutationCreateMenusArgs = {
  relativePath: Scalars['String']['input'];
  params: MenusMutation;
};


export type MutationUpdateConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: ConfigMutation;
};


export type MutationCreateConfigArgs = {
  relativePath: Scalars['String']['input'];
  params: ConfigMutation;
};


export type MutationUpdateSubscriptionArgs = {
  relativePath: Scalars['String']['input'];
  params: SubscriptionMutation;
};


export type MutationCreateSubscriptionArgs = {
  relativePath: Scalars['String']['input'];
  params: SubscriptionMutation;
};


export type MutationUpdateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationCreateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationUpdateHome2Args = {
  relativePath: Scalars['String']['input'];
  params: Home2Mutation;
};


export type MutationCreateHome2Args = {
  relativePath: Scalars['String']['input'];
  params: Home2Mutation;
};


export type MutationUpdateHome3Args = {
  relativePath: Scalars['String']['input'];
  params: Home3Mutation;
};


export type MutationCreateHome3Args = {
  relativePath: Scalars['String']['input'];
  params: Home3Mutation;
};


export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationCreateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};


export type MutationUpdateAuthor_PageArgs = {
  relativePath: Scalars['String']['input'];
  params: Author_PageMutation;
};


export type MutationCreateAuthor_PageArgs = {
  relativePath: Scalars['String']['input'];
  params: Author_PageMutation;
};


export type MutationUpdateAuthorArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorMutation;
};


export type MutationCreateAuthorArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorMutation;
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};


export type MutationCreatePortfolioArgs = {
  relativePath: Scalars['String']['input'];
  params: PortfolioMutation;
};


export type MutationUpdateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};


export type MutationCreateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};


export type MutationUpdateTagsArgs = {
  relativePath: Scalars['String']['input'];
  params: TagsMutation;
};


export type MutationCreateTagsArgs = {
  relativePath: Scalars['String']['input'];
  params: TagsMutation;
};


export type MutationUpdateArchiveArgs = {
  relativePath: Scalars['String']['input'];
  params: ArchiveMutation;
};


export type MutationCreateArchiveArgs = {
  relativePath: Scalars['String']['input'];
  params: ArchiveMutation;
};


export type MutationUpdateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationCreateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationUpdatePrivacyArgs = {
  relativePath: Scalars['String']['input'];
  params: PrivacyMutation;
};


export type MutationCreatePrivacyArgs = {
  relativePath: Scalars['String']['input'];
  params: PrivacyMutation;
};

export type DocumentUpdateMutation = {
  menus?: InputMaybe<MenusMutation>;
  config?: InputMaybe<ConfigMutation>;
  subscription?: InputMaybe<SubscriptionMutation>;
  home?: InputMaybe<HomeMutation>;
  home2?: InputMaybe<Home2Mutation>;
  home3?: InputMaybe<Home3Mutation>;
  about?: InputMaybe<AboutMutation>;
  author_page?: InputMaybe<Author_PageMutation>;
  author?: InputMaybe<AuthorMutation>;
  blog?: InputMaybe<BlogMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
  categories?: InputMaybe<CategoriesMutation>;
  tags?: InputMaybe<TagsMutation>;
  archive?: InputMaybe<ArchiveMutation>;
  contact?: InputMaybe<ContactMutation>;
  privacy?: InputMaybe<PrivacyMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  menus?: InputMaybe<MenusMutation>;
  config?: InputMaybe<ConfigMutation>;
  subscription?: InputMaybe<SubscriptionMutation>;
  home?: InputMaybe<HomeMutation>;
  home2?: InputMaybe<Home2Mutation>;
  home3?: InputMaybe<Home3Mutation>;
  about?: InputMaybe<AboutMutation>;
  author_page?: InputMaybe<Author_PageMutation>;
  author?: InputMaybe<AuthorMutation>;
  blog?: InputMaybe<BlogMutation>;
  portfolio?: InputMaybe<PortfolioMutation>;
  categories?: InputMaybe<CategoriesMutation>;
  tags?: InputMaybe<TagsMutation>;
  archive?: InputMaybe<ArchiveMutation>;
  contact?: InputMaybe<ContactMutation>;
  privacy?: InputMaybe<PrivacyMutation>;
};

export type MenusMainMenuSubmenuMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['String']['input']>;
  rel?: InputMaybe<Scalars['String']['input']>;
};

export type MenusMainMenuMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['String']['input']>;
  rel?: InputMaybe<Scalars['String']['input']>;
  submenu?: InputMaybe<Array<InputMaybe<MenusMainMenuSubmenuMutation>>>;
};

export type MenusFooterMenuMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['String']['input']>;
  rel?: InputMaybe<Scalars['String']['input']>;
};

export type MenusMutation = {
  mainMenu?: InputMaybe<Array<InputMaybe<MenusMainMenuMutation>>>;
  footerMenu?: InputMaybe<Array<InputMaybe<MenusFooterMenuMutation>>>;
};

export type ConfigLogoMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  src_light?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
};

export type ConfigMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ConfigSettingsMutation = {
  homepage_post_count?: InputMaybe<Scalars['Float']['input']>;
  portfolio_post_page_amount?: InputMaybe<Scalars['Float']['input']>;
  pagination?: InputMaybe<Scalars['Float']['input']>;
  copyright?: InputMaybe<Scalars['String']['input']>;
};

export type ConfigMutation = {
  baseURL?: InputMaybe<Scalars['String']['input']>;
  favicon?: InputMaybe<Scalars['String']['input']>;
  basePath?: InputMaybe<Scalars['String']['input']>;
  trailingSlash?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<ConfigLogoMutation>;
  metadata?: InputMaybe<ConfigMetadataMutation>;
  settings?: InputMaybe<ConfigSettingsMutation>;
};

export type SubscriptionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  mailChimpFormAction?: InputMaybe<Scalars['String']['input']>;
  mailChimpFormName?: InputMaybe<Scalars['String']['input']>;
  formPlaceholder?: InputMaybe<Scalars['String']['input']>;
  formButtonLabel?: InputMaybe<Scalars['String']['input']>;
};

export type HomeMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type HomeRecent_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  button_label?: InputMaybe<Scalars['String']['input']>;
};

export type HomeMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<HomeMetadataMutation>;
  recent_posts?: InputMaybe<HomeRecent_PostsMutation>;
};

export type Home2MetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type Home2Social_LinksMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  twitter?: InputMaybe<Scalars['String']['input']>;
  facebook?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
};

export type Home2Recent_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  button_label?: InputMaybe<Scalars['String']['input']>;
};

export type Home2Mutation = {
  metadata?: InputMaybe<Home2MetadataMutation>;
  image?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  banner_button_label?: InputMaybe<Scalars['String']['input']>;
  social_links?: InputMaybe<Home2Social_LinksMutation>;
  recent_posts?: InputMaybe<Home2Recent_PostsMutation>;
};

export type Home3MetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type Home3Featured_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type Home3Recent_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  button_label?: InputMaybe<Scalars['String']['input']>;
};

export type Home3Mutation = {
  metadata?: InputMaybe<Home3MetadataMutation>;
  featured_posts?: InputMaybe<Home3Featured_PostsMutation>;
  recent_posts?: InputMaybe<Home3Recent_PostsMutation>;
};

export type AboutMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type AboutIntroImagesMutation = {
  src?: InputMaybe<Scalars['String']['input']>;
  width?: InputMaybe<Scalars['Float']['input']>;
  height?: InputMaybe<Scalars['Float']['input']>;
  grid_class?: InputMaybe<Scalars['String']['input']>;
};

export type AboutIntroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  images?: InputMaybe<Array<InputMaybe<AboutIntroImagesMutation>>>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type AboutOur_WritersMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type AboutMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<AboutMetadataMutation>;
  intro?: InputMaybe<AboutIntroMutation>;
  our_writers?: InputMaybe<AboutOur_WritersMutation>;
};

export type Author_PageMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type Author_PageMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Author_PageMetadataMutation>;
};

export type AuthorMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type BlogMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PortfolioMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type CategoriesMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type CategoriesRecent_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  visible_posts_count?: InputMaybe<Scalars['Float']['input']>;
  button_label?: InputMaybe<Scalars['String']['input']>;
};

export type CategoriesMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<CategoriesMetadataMutation>;
  recent_posts?: InputMaybe<CategoriesRecent_PostsMutation>;
};

export type TagsMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type TagsRecent_PostsMutation = {
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  visible_posts_count?: InputMaybe<Scalars['Float']['input']>;
  button_label?: InputMaybe<Scalars['String']['input']>;
};

export type TagsMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<TagsMetadataMutation>;
  recent_posts?: InputMaybe<TagsRecent_PostsMutation>;
};

export type ArchiveMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type ArchiveMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<ArchiveMetadataMutation>;
};

export type ContactMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type ContactContact_FormMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  contact_info_title?: InputMaybe<Scalars['String']['input']>;
  email_address?: InputMaybe<Scalars['String']['input']>;
  phone_number?: InputMaybe<Scalars['String']['input']>;
  contact_email?: InputMaybe<Scalars['String']['input']>;
  form_button_text?: InputMaybe<Scalars['String']['input']>;
};

export type ContactMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<ContactMetadataMutation>;
  contact_form?: InputMaybe<ContactContact_FormMutation>;
};

export type PrivacyMetadataMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type PrivacyMutation = {
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<PrivacyMetadataMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type MenusPartsFragment = { __typename: 'Menus', mainMenu?: Array<{ __typename: 'MenusMainMenu', name: string, link: string, target?: string | null, rel?: string | null, submenu?: Array<{ __typename: 'MenusMainMenuSubmenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null } | null> | null, footerMenu?: Array<{ __typename: 'MenusFooterMenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null };

export type ConfigPartsFragment = { __typename: 'Config', baseURL?: string | null, favicon?: string | null, basePath?: string | null, trailingSlash?: boolean | null, logo?: { __typename: 'ConfigLogo', src?: string | null, src_light?: string | null, alt?: string | null, width?: number | null, height?: number | null } | null, metadata?: { __typename: 'ConfigMetadata', title?: string | null, description?: string | null, author?: string | null, keywords?: string | null, image?: string | null } | null, settings?: { __typename: 'ConfigSettings', portfolio_post_page_amount?: number | null, homepage_post_count?: number | null, pagination?: number | null, copyright?: string | null } | null };

export type SubscriptionPartsFragment = { __typename: 'Subscription', title?: string | null, mailChimpFormAction?: string | null, mailChimpFormName?: string | null, formPlaceholder?: string | null, formButtonLabel?: string | null };

export type HomePartsFragment = { __typename: 'Home', title?: string | null, metadata?: { __typename: 'HomeMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'HomeRecent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null };

export type Home2PartsFragment = { __typename: 'Home2', image?: string | null, subtitle?: string | null, title?: string | null, description?: string | null, banner_button_label?: string | null, metadata?: { __typename: 'Home2Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, social_links?: { __typename: 'Home2Social_links', enable?: boolean | null, twitter?: string | null, facebook?: string | null, linkedin?: string | null } | null, recent_posts?: { __typename: 'Home2Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null };

export type Home3PartsFragment = { __typename: 'Home3', metadata?: { __typename: 'Home3Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, featured_posts?: { __typename: 'Home3Featured_posts', enable?: boolean | null, title?: string | null } | null, recent_posts?: { __typename: 'Home3Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null };

export type AboutPartsFragment = { __typename: 'About', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'AboutMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, intro?: { __typename: 'AboutIntro', title?: string | null, description?: string | null, images?: Array<{ __typename: 'AboutIntroImages', src?: string | null, width?: number | null, height?: number | null, grid_class?: string | null } | null> | null } | null, our_writers?: { __typename: 'AboutOur_writers', enable?: boolean | null, title?: string | null } | null };

export type Author_PagePartsFragment = { __typename: 'Author_page', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'Author_pageMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null };

export type AuthorPartsFragment = { __typename: 'Author', title: string, subtitle: string, image: string, body?: any | null };

export type BlogPartsFragment = { __typename: 'Blog', draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null };

export type PortfolioPartsFragment = { __typename: 'Portfolio', draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null };

export type CategoriesPartsFragment = { __typename: 'Categories', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'CategoriesMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'CategoriesRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null };

export type TagsPartsFragment = { __typename: 'Tags', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'TagsMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'TagsRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null };

export type ArchivePartsFragment = { __typename: 'Archive', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'ArchiveMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null };

export type ContactPartsFragment = { __typename: 'Contact', draft?: boolean | null, title?: string | null, metadata?: { __typename: 'ContactMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, contact_form?: { __typename: 'ContactContact_form', title?: string | null, description?: string | null, contact_info_title?: string | null, email_address?: string | null, phone_number?: string | null, contact_email?: string | null, form_button_text?: string | null } | null };

export type PrivacyPartsFragment = { __typename: 'Privacy', draft?: boolean | null, title?: string | null, body?: any | null, metadata?: { __typename: 'PrivacyMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null };

export type MenusQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MenusQuery = { __typename?: 'Query', menus: { __typename: 'Menus', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mainMenu?: Array<{ __typename: 'MenusMainMenu', name: string, link: string, target?: string | null, rel?: string | null, submenu?: Array<{ __typename: 'MenusMainMenuSubmenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null } | null> | null, footerMenu?: Array<{ __typename: 'MenusFooterMenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null } };

export type MenusConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MenusFilter>;
}>;


export type MenusConnectionQuery = { __typename?: 'Query', menusConnection: { __typename?: 'MenusConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MenusConnectionEdges', cursor: string, node?: { __typename: 'Menus', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, mainMenu?: Array<{ __typename: 'MenusMainMenu', name: string, link: string, target?: string | null, rel?: string | null, submenu?: Array<{ __typename: 'MenusMainMenuSubmenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null } | null> | null, footerMenu?: Array<{ __typename: 'MenusFooterMenu', name: string, link: string, target?: string | null, rel?: string | null } | null> | null } | null } | null> | null } };

export type ConfigQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ConfigQuery = { __typename?: 'Query', config: { __typename: 'Config', id: string, baseURL?: string | null, favicon?: string | null, basePath?: string | null, trailingSlash?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, logo?: { __typename: 'ConfigLogo', src?: string | null, src_light?: string | null, alt?: string | null, width?: number | null, height?: number | null } | null, metadata?: { __typename: 'ConfigMetadata', title?: string | null, description?: string | null, author?: string | null, keywords?: string | null, image?: string | null } | null, settings?: { __typename: 'ConfigSettings', portfolio_post_page_amount?: number | null, homepage_post_count?: number | null, pagination?: number | null, copyright?: string | null } | null } };

export type ConfigConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConfigFilter>;
}>;


export type ConfigConnectionQuery = { __typename?: 'Query', configConnection: { __typename?: 'ConfigConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ConfigConnectionEdges', cursor: string, node?: { __typename: 'Config', id: string, baseURL?: string | null, favicon?: string | null, basePath?: string | null, trailingSlash?: boolean | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, logo?: { __typename: 'ConfigLogo', src?: string | null, src_light?: string | null, alt?: string | null, width?: number | null, height?: number | null } | null, metadata?: { __typename: 'ConfigMetadata', title?: string | null, description?: string | null, author?: string | null, keywords?: string | null, image?: string | null } | null, settings?: { __typename: 'ConfigSettings', portfolio_post_page_amount?: number | null, homepage_post_count?: number | null, pagination?: number | null, copyright?: string | null } | null } | null } | null> | null } };

export type SubscriptionQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SubscriptionQuery = { __typename?: 'Query', subscription: { __typename: 'Subscription', id: string, title?: string | null, mailChimpFormAction?: string | null, mailChimpFormName?: string | null, formPlaceholder?: string | null, formButtonLabel?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type SubscriptionConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SubscriptionFilter>;
}>;


export type SubscriptionConnectionQuery = { __typename?: 'Query', subscriptionConnection: { __typename?: 'SubscriptionConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SubscriptionConnectionEdges', cursor: string, node?: { __typename: 'Subscription', id: string, title?: string | null, mailChimpFormAction?: string | null, mailChimpFormName?: string | null, formPlaceholder?: string | null, formButtonLabel?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type HomeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomeQuery = { __typename?: 'Query', home: { __typename: 'Home', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'HomeMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'HomeRecent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } };

export type HomeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
}>;


export type HomeConnectionQuery = { __typename?: 'Query', homeConnection: { __typename?: 'HomeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomeConnectionEdges', cursor: string, node?: { __typename: 'Home', id: string, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'HomeMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'HomeRecent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } | null } | null> | null } };

export type Home2QueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Home2Query = { __typename?: 'Query', home2: { __typename: 'Home2', id: string, image?: string | null, subtitle?: string | null, title?: string | null, description?: string | null, banner_button_label?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Home2Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, social_links?: { __typename: 'Home2Social_links', enable?: boolean | null, twitter?: string | null, facebook?: string | null, linkedin?: string | null } | null, recent_posts?: { __typename: 'Home2Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } };

export type Home2ConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Home2Filter>;
}>;


export type Home2ConnectionQuery = { __typename?: 'Query', home2Connection: { __typename?: 'Home2Connection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Home2ConnectionEdges', cursor: string, node?: { __typename: 'Home2', id: string, image?: string | null, subtitle?: string | null, title?: string | null, description?: string | null, banner_button_label?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Home2Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, social_links?: { __typename: 'Home2Social_links', enable?: boolean | null, twitter?: string | null, facebook?: string | null, linkedin?: string | null } | null, recent_posts?: { __typename: 'Home2Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } | null } | null> | null } };

export type Home3QueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Home3Query = { __typename?: 'Query', home3: { __typename: 'Home3', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Home3Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, featured_posts?: { __typename: 'Home3Featured_posts', enable?: boolean | null, title?: string | null } | null, recent_posts?: { __typename: 'Home3Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } };

export type Home3ConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Home3Filter>;
}>;


export type Home3ConnectionQuery = { __typename?: 'Query', home3Connection: { __typename?: 'Home3Connection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Home3ConnectionEdges', cursor: string, node?: { __typename: 'Home3', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Home3Metadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, featured_posts?: { __typename: 'Home3Featured_posts', enable?: boolean | null, title?: string | null } | null, recent_posts?: { __typename: 'Home3Recent_posts', enable?: boolean | null, title?: string | null, button_label?: string | null } | null } | null } | null> | null } };

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AboutQuery = { __typename?: 'Query', about: { __typename: 'About', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'AboutMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, intro?: { __typename: 'AboutIntro', title?: string | null, description?: string | null, images?: Array<{ __typename: 'AboutIntroImages', src?: string | null, width?: number | null, height?: number | null, grid_class?: string | null } | null> | null } | null, our_writers?: { __typename: 'AboutOur_writers', enable?: boolean | null, title?: string | null } | null } };

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
}>;


export type AboutConnectionQuery = { __typename?: 'Query', aboutConnection: { __typename?: 'AboutConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AboutConnectionEdges', cursor: string, node?: { __typename: 'About', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'AboutMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, intro?: { __typename: 'AboutIntro', title?: string | null, description?: string | null, images?: Array<{ __typename: 'AboutIntroImages', src?: string | null, width?: number | null, height?: number | null, grid_class?: string | null } | null> | null } | null, our_writers?: { __typename: 'AboutOur_writers', enable?: boolean | null, title?: string | null } | null } | null } | null> | null } };

export type Author_PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type Author_PageQuery = { __typename?: 'Query', author_page: { __typename: 'Author_page', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Author_pageMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } };

export type Author_PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<Author_PageFilter>;
}>;


export type Author_PageConnectionQuery = { __typename?: 'Query', author_pageConnection: { __typename?: 'Author_pageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'Author_pageConnectionEdges', cursor: string, node?: { __typename: 'Author_page', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'Author_pageMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } | null } | null> | null } };

export type AuthorQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AuthorQuery = { __typename?: 'Query', author: { __typename: 'Author', id: string, title: string, subtitle: string, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type AuthorConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorFilter>;
}>;


export type AuthorConnectionQuery = { __typename?: 'Query', authorConnection: { __typename?: 'AuthorConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorConnectionEdges', cursor: string, node?: { __typename: 'Author', id: string, title: string, subtitle: string, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PortfolioQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PortfolioQuery = { __typename?: 'Query', portfolio: { __typename: 'Portfolio', id: string, draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PortfolioConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PortfolioFilter>;
}>;


export type PortfolioConnectionQuery = { __typename?: 'Query', portfolioConnection: { __typename?: 'PortfolioConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PortfolioConnectionEdges', cursor: string, node?: { __typename: 'Portfolio', id: string, draft?: boolean | null, featured?: boolean | null, date: string, title: string, description: string, author?: string | null, categories: Array<string>, tags: Array<string>, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type CategoriesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CategoriesQuery = { __typename?: 'Query', categories: { __typename: 'Categories', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'CategoriesMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'CategoriesRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null } };

export type CategoriesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
}>;


export type CategoriesConnectionQuery = { __typename?: 'Query', categoriesConnection: { __typename?: 'CategoriesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CategoriesConnectionEdges', cursor: string, node?: { __typename: 'Categories', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'CategoriesMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'CategoriesRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null } | null } | null> | null } };

export type TagsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type TagsQuery = { __typename?: 'Query', tags: { __typename: 'Tags', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'TagsMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'TagsRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null } };

export type TagsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TagsFilter>;
}>;


export type TagsConnectionQuery = { __typename?: 'Query', tagsConnection: { __typename?: 'TagsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TagsConnectionEdges', cursor: string, node?: { __typename: 'Tags', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'TagsMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, recent_posts?: { __typename: 'TagsRecent_posts', enable?: boolean | null, title?: string | null, visible_posts_count?: number | null, button_label?: string | null } | null } | null } | null> | null } };

export type ArchiveQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ArchiveQuery = { __typename?: 'Query', archive: { __typename: 'Archive', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'ArchiveMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } };

export type ArchiveConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ArchiveFilter>;
}>;


export type ArchiveConnectionQuery = { __typename?: 'Query', archiveConnection: { __typename?: 'ArchiveConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ArchiveConnectionEdges', cursor: string, node?: { __typename: 'Archive', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'ArchiveMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } | null } | null> | null } };

export type ContactQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContactQuery = { __typename?: 'Query', contact: { __typename: 'Contact', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'ContactMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, contact_form?: { __typename: 'ContactContact_form', title?: string | null, description?: string | null, contact_info_title?: string | null, email_address?: string | null, phone_number?: string | null, contact_email?: string | null, form_button_text?: string | null } | null } };

export type ContactConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
}>;


export type ContactConnectionQuery = { __typename?: 'Query', contactConnection: { __typename?: 'ContactConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactConnectionEdges', cursor: string, node?: { __typename: 'Contact', id: string, draft?: boolean | null, title?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'ContactMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null, contact_form?: { __typename: 'ContactContact_form', title?: string | null, description?: string | null, contact_info_title?: string | null, email_address?: string | null, phone_number?: string | null, contact_email?: string | null, form_button_text?: string | null } | null } | null } | null> | null } };

export type PrivacyQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PrivacyQuery = { __typename?: 'Query', privacy: { __typename: 'Privacy', id: string, draft?: boolean | null, title?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'PrivacyMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } };

export type PrivacyConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PrivacyFilter>;
}>;


export type PrivacyConnectionQuery = { __typename?: 'Query', privacyConnection: { __typename?: 'PrivacyConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PrivacyConnectionEdges', cursor: string, node?: { __typename: 'Privacy', id: string, draft?: boolean | null, title?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, metadata?: { __typename: 'PrivacyMetadata', title?: string | null, description?: string | null, author?: string | null, image?: string | null, keywords?: string | null, noindex?: boolean | null, canonical?: string | null } | null } | null } | null> | null } };

export const MenusPartsFragmentDoc = gql`
    fragment MenusParts on Menus {
  __typename
  mainMenu {
    __typename
    name
    link
    target
    rel
    submenu {
      __typename
      name
      link
      target
      rel
    }
  }
  footerMenu {
    __typename
    name
    link
    target
    rel
  }
}
    `;
export const ConfigPartsFragmentDoc = gql`
    fragment ConfigParts on Config {
  __typename
  baseURL
  favicon
  basePath
  trailingSlash
  logo {
    __typename
    src
    src_light
    alt
    width
    height
  }
  metadata {
    __typename
    title
    description
    author
    keywords
    image
  }
  settings {
    __typename
    homepage_post_count
    pagination
    copyright
    portfolio_post_page_amount
  }
}
    `;
export const SubscriptionPartsFragmentDoc = gql`
    fragment SubscriptionParts on Subscription {
  __typename
  title
  mailChimpFormAction
  mailChimpFormName
  formPlaceholder
  formButtonLabel
}
    `;
export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  __typename
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  recent_posts {
    __typename
    enable
    title
    button_label
  }
}
    `;
export const Home2PartsFragmentDoc = gql`
    fragment Home2Parts on Home2 {
  __typename
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  image
  subtitle
  title
  description
  banner_button_label
  social_links {
    __typename
    enable
    twitter
    facebook
    linkedin
  }
  recent_posts {
    __typename
    enable
    title
    button_label
  }
}
    `;
export const Home3PartsFragmentDoc = gql`
    fragment Home3Parts on Home3 {
  __typename
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  featured_posts {
    __typename
    enable
    title
  }
  recent_posts {
    __typename
    enable
    title
    button_label
  }
}
    `;
export const AboutPartsFragmentDoc = gql`
    fragment AboutParts on About {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  intro {
    __typename
    title
    images {
      __typename
      src
      width
      height
      grid_class
    }
    description
  }
  our_writers {
    __typename
    enable
    title
  }
}
    `;
export const Author_PagePartsFragmentDoc = gql`
    fragment Author_pageParts on Author_page {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
}
    `;
export const AuthorPartsFragmentDoc = gql`
    fragment AuthorParts on Author {
  __typename
  title
  subtitle
  image
  body
}
    `;
export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  draft
  featured
  date
  title
  description
  author
  categories
  tags
  image
  body
}
    `;
export const PortfolioPartsFragmentDoc = gql`
    fragment PortfolioParts on Portfolio {
  __typename
  draft
  featured
  date
  title
  description
  author
  categories
  tags
  image
  body
}
    `;
export const CategoriesPartsFragmentDoc = gql`
    fragment CategoriesParts on Categories {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  recent_posts {
    __typename
    enable
    title
    visible_posts_count
    button_label
  }
}
    `;
export const TagsPartsFragmentDoc = gql`
    fragment TagsParts on Tags {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  recent_posts {
    __typename
    enable
    title
    visible_posts_count
    button_label
  }
}
    `;
export const ArchivePartsFragmentDoc = gql`
    fragment ArchiveParts on Archive {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
}
    `;
export const ContactPartsFragmentDoc = gql`
    fragment ContactParts on Contact {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  contact_form {
    __typename
    title
    description
    contact_info_title
    email_address
    phone_number
    contact_email
    form_button_text
  }
}
    `;
export const PrivacyPartsFragmentDoc = gql`
    fragment PrivacyParts on Privacy {
  __typename
  draft
  title
  metadata {
    __typename
    title
    description
    author
    image
    keywords
    noindex
    canonical
  }
  body
}
    `;
export const MenusDocument = gql`
    query menus($relativePath: String!) {
  menus(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MenusParts
  }
}
    ${MenusPartsFragmentDoc}`;
export const MenusConnectionDocument = gql`
    query menusConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MenusFilter) {
  menusConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MenusParts
      }
    }
  }
}
    ${MenusPartsFragmentDoc}`;
export const ConfigDocument = gql`
    query config($relativePath: String!) {
  config(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ConfigParts
  }
}
    ${ConfigPartsFragmentDoc}`;
export const ConfigConnectionDocument = gql`
    query configConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ConfigFilter) {
  configConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ConfigParts
      }
    }
  }
}
    ${ConfigPartsFragmentDoc}`;
export const SubscriptionDocument = gql`
    query subscription($relativePath: String!) {
  subscription(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SubscriptionParts
  }
}
    ${SubscriptionPartsFragmentDoc}`;
export const SubscriptionConnectionDocument = gql`
    query subscriptionConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SubscriptionFilter) {
  subscriptionConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SubscriptionParts
      }
    }
  }
}
    ${SubscriptionPartsFragmentDoc}`;
export const HomeDocument = gql`
    query home($relativePath: String!) {
  home(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomeParts
  }
}
    ${HomePartsFragmentDoc}`;
export const HomeConnectionDocument = gql`
    query homeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomeFilter) {
  homeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomeParts
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const Home2Document = gql`
    query home2($relativePath: String!) {
  home2(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Home2Parts
  }
}
    ${Home2PartsFragmentDoc}`;
export const Home2ConnectionDocument = gql`
    query home2Connection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Home2Filter) {
  home2Connection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Home2Parts
      }
    }
  }
}
    ${Home2PartsFragmentDoc}`;
export const Home3Document = gql`
    query home3($relativePath: String!) {
  home3(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Home3Parts
  }
}
    ${Home3PartsFragmentDoc}`;
export const Home3ConnectionDocument = gql`
    query home3Connection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Home3Filter) {
  home3Connection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Home3Parts
      }
    }
  }
}
    ${Home3PartsFragmentDoc}`;
export const AboutDocument = gql`
    query about($relativePath: String!) {
  about(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AboutParts
  }
}
    ${AboutPartsFragmentDoc}`;
export const AboutConnectionDocument = gql`
    query aboutConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AboutFilter) {
  aboutConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AboutParts
      }
    }
  }
}
    ${AboutPartsFragmentDoc}`;
export const Author_PageDocument = gql`
    query author_page($relativePath: String!) {
  author_page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...Author_pageParts
  }
}
    ${Author_PagePartsFragmentDoc}`;
export const Author_PageConnectionDocument = gql`
    query author_pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: Author_pageFilter) {
  author_pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...Author_pageParts
      }
    }
  }
}
    ${Author_PagePartsFragmentDoc}`;
export const AuthorDocument = gql`
    query author($relativePath: String!) {
  author(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorParts
  }
}
    ${AuthorPartsFragmentDoc}`;
export const AuthorConnectionDocument = gql`
    query authorConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorFilter) {
  authorConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorParts
      }
    }
  }
}
    ${AuthorPartsFragmentDoc}`;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const PortfolioDocument = gql`
    query portfolio($relativePath: String!) {
  portfolio(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PortfolioParts
  }
}
    ${PortfolioPartsFragmentDoc}`;
export const PortfolioConnectionDocument = gql`
    query portfolioConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PortfolioFilter) {
  portfolioConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PortfolioParts
      }
    }
  }
}
    ${PortfolioPartsFragmentDoc}`;
export const CategoriesDocument = gql`
    query categories($relativePath: String!) {
  categories(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CategoriesParts
  }
}
    ${CategoriesPartsFragmentDoc}`;
export const CategoriesConnectionDocument = gql`
    query categoriesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CategoriesFilter) {
  categoriesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CategoriesParts
      }
    }
  }
}
    ${CategoriesPartsFragmentDoc}`;
export const TagsDocument = gql`
    query tags($relativePath: String!) {
  tags(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TagsParts
  }
}
    ${TagsPartsFragmentDoc}`;
export const TagsConnectionDocument = gql`
    query tagsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TagsFilter) {
  tagsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TagsParts
      }
    }
  }
}
    ${TagsPartsFragmentDoc}`;
export const ArchiveDocument = gql`
    query archive($relativePath: String!) {
  archive(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ArchiveParts
  }
}
    ${ArchivePartsFragmentDoc}`;
export const ArchiveConnectionDocument = gql`
    query archiveConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ArchiveFilter) {
  archiveConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ArchiveParts
      }
    }
  }
}
    ${ArchivePartsFragmentDoc}`;
export const ContactDocument = gql`
    query contact($relativePath: String!) {
  contact(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactParts
  }
}
    ${ContactPartsFragmentDoc}`;
export const ContactConnectionDocument = gql`
    query contactConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactFilter) {
  contactConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactParts
      }
    }
  }
}
    ${ContactPartsFragmentDoc}`;
export const PrivacyDocument = gql`
    query privacy($relativePath: String!) {
  privacy(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PrivacyParts
  }
}
    ${PrivacyPartsFragmentDoc}`;
export const PrivacyConnectionDocument = gql`
    query privacyConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PrivacyFilter) {
  privacyConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PrivacyParts
      }
    }
  }
}
    ${PrivacyPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      menus(variables: MenusQueryVariables, options?: C): Promise<{data: MenusQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenusQueryVariables, query: string}> {
        return requester<{data: MenusQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenusQueryVariables, query: string}, MenusQueryVariables>(MenusDocument, variables, options);
      },
    menusConnection(variables?: MenusConnectionQueryVariables, options?: C): Promise<{data: MenusConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenusConnectionQueryVariables, query: string}> {
        return requester<{data: MenusConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MenusConnectionQueryVariables, query: string}, MenusConnectionQueryVariables>(MenusConnectionDocument, variables, options);
      },
    config(variables: ConfigQueryVariables, options?: C): Promise<{data: ConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigQueryVariables, query: string}> {
        return requester<{data: ConfigQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigQueryVariables, query: string}, ConfigQueryVariables>(ConfigDocument, variables, options);
      },
    configConnection(variables?: ConfigConnectionQueryVariables, options?: C): Promise<{data: ConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigConnectionQueryVariables, query: string}> {
        return requester<{data: ConfigConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConfigConnectionQueryVariables, query: string}, ConfigConnectionQueryVariables>(ConfigConnectionDocument, variables, options);
      },
    subscription(variables: SubscriptionQueryVariables, options?: C): Promise<{data: SubscriptionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SubscriptionQueryVariables, query: string}> {
        return requester<{data: SubscriptionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SubscriptionQueryVariables, query: string}, SubscriptionQueryVariables>(SubscriptionDocument, variables, options);
      },
    subscriptionConnection(variables?: SubscriptionConnectionQueryVariables, options?: C): Promise<{data: SubscriptionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SubscriptionConnectionQueryVariables, query: string}> {
        return requester<{data: SubscriptionConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SubscriptionConnectionQueryVariables, query: string}, SubscriptionConnectionQueryVariables>(SubscriptionConnectionDocument, variables, options);
      },
    home(variables: HomeQueryVariables, options?: C): Promise<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}> {
        return requester<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}, HomeQueryVariables>(HomeDocument, variables, options);
      },
    homeConnection(variables?: HomeConnectionQueryVariables, options?: C): Promise<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}> {
        return requester<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}, HomeConnectionQueryVariables>(HomeConnectionDocument, variables, options);
      },
    home2(variables: Home2QueryVariables, options?: C): Promise<{data: Home2Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home2QueryVariables, query: string}> {
        return requester<{data: Home2Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home2QueryVariables, query: string}, Home2QueryVariables>(Home2Document, variables, options);
      },
    home2Connection(variables?: Home2ConnectionQueryVariables, options?: C): Promise<{data: Home2ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home2ConnectionQueryVariables, query: string}> {
        return requester<{data: Home2ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home2ConnectionQueryVariables, query: string}, Home2ConnectionQueryVariables>(Home2ConnectionDocument, variables, options);
      },
    home3(variables: Home3QueryVariables, options?: C): Promise<{data: Home3Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home3QueryVariables, query: string}> {
        return requester<{data: Home3Query, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home3QueryVariables, query: string}, Home3QueryVariables>(Home3Document, variables, options);
      },
    home3Connection(variables?: Home3ConnectionQueryVariables, options?: C): Promise<{data: Home3ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home3ConnectionQueryVariables, query: string}> {
        return requester<{data: Home3ConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Home3ConnectionQueryVariables, query: string}, Home3ConnectionQueryVariables>(Home3ConnectionDocument, variables, options);
      },
    about(variables: AboutQueryVariables, options?: C): Promise<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}> {
        return requester<{data: AboutQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutQueryVariables, query: string}, AboutQueryVariables>(AboutDocument, variables, options);
      },
    aboutConnection(variables?: AboutConnectionQueryVariables, options?: C): Promise<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}> {
        return requester<{data: AboutConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AboutConnectionQueryVariables, query: string}, AboutConnectionQueryVariables>(AboutConnectionDocument, variables, options);
      },
    author_page(variables: Author_PageQueryVariables, options?: C): Promise<{data: Author_PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Author_PageQueryVariables, query: string}> {
        return requester<{data: Author_PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Author_PageQueryVariables, query: string}, Author_PageQueryVariables>(Author_PageDocument, variables, options);
      },
    author_pageConnection(variables?: Author_PageConnectionQueryVariables, options?: C): Promise<{data: Author_PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Author_PageConnectionQueryVariables, query: string}> {
        return requester<{data: Author_PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: Author_PageConnectionQueryVariables, query: string}, Author_PageConnectionQueryVariables>(Author_PageConnectionDocument, variables, options);
      },
    author(variables: AuthorQueryVariables, options?: C): Promise<{data: AuthorQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorQueryVariables, query: string}> {
        return requester<{data: AuthorQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorQueryVariables, query: string}, AuthorQueryVariables>(AuthorDocument, variables, options);
      },
    authorConnection(variables?: AuthorConnectionQueryVariables, options?: C): Promise<{data: AuthorConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorConnectionQueryVariables, query: string}, AuthorConnectionQueryVariables>(AuthorConnectionDocument, variables, options);
      },
    blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    portfolio(variables: PortfolioQueryVariables, options?: C): Promise<{data: PortfolioQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioQueryVariables, query: string}> {
        return requester<{data: PortfolioQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioQueryVariables, query: string}, PortfolioQueryVariables>(PortfolioDocument, variables, options);
      },
    portfolioConnection(variables?: PortfolioConnectionQueryVariables, options?: C): Promise<{data: PortfolioConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioConnectionQueryVariables, query: string}> {
        return requester<{data: PortfolioConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PortfolioConnectionQueryVariables, query: string}, PortfolioConnectionQueryVariables>(PortfolioConnectionDocument, variables, options);
      },
    categories(variables: CategoriesQueryVariables, options?: C): Promise<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}> {
        return requester<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}, CategoriesQueryVariables>(CategoriesDocument, variables, options);
      },
    categoriesConnection(variables?: CategoriesConnectionQueryVariables, options?: C): Promise<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}> {
        return requester<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}, CategoriesConnectionQueryVariables>(CategoriesConnectionDocument, variables, options);
      },
    tags(variables: TagsQueryVariables, options?: C): Promise<{data: TagsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TagsQueryVariables, query: string}> {
        return requester<{data: TagsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TagsQueryVariables, query: string}, TagsQueryVariables>(TagsDocument, variables, options);
      },
    tagsConnection(variables?: TagsConnectionQueryVariables, options?: C): Promise<{data: TagsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TagsConnectionQueryVariables, query: string}> {
        return requester<{data: TagsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TagsConnectionQueryVariables, query: string}, TagsConnectionQueryVariables>(TagsConnectionDocument, variables, options);
      },
    archive(variables: ArchiveQueryVariables, options?: C): Promise<{data: ArchiveQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ArchiveQueryVariables, query: string}> {
        return requester<{data: ArchiveQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ArchiveQueryVariables, query: string}, ArchiveQueryVariables>(ArchiveDocument, variables, options);
      },
    archiveConnection(variables?: ArchiveConnectionQueryVariables, options?: C): Promise<{data: ArchiveConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ArchiveConnectionQueryVariables, query: string}> {
        return requester<{data: ArchiveConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ArchiveConnectionQueryVariables, query: string}, ArchiveConnectionQueryVariables>(ArchiveConnectionDocument, variables, options);
      },
    contact(variables: ContactQueryVariables, options?: C): Promise<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}> {
        return requester<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}, ContactQueryVariables>(ContactDocument, variables, options);
      },
    contactConnection(variables?: ContactConnectionQueryVariables, options?: C): Promise<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}> {
        return requester<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}, ContactConnectionQueryVariables>(ContactConnectionDocument, variables, options);
      },
    privacy(variables: PrivacyQueryVariables, options?: C): Promise<{data: PrivacyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PrivacyQueryVariables, query: string}> {
        return requester<{data: PrivacyQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PrivacyQueryVariables, query: string}, PrivacyQueryVariables>(PrivacyDocument, variables, options);
      },
    privacyConnection(variables?: PrivacyConnectionQueryVariables, options?: C): Promise<{data: PrivacyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PrivacyConnectionQueryVariables, query: string}> {
        return requester<{data: PrivacyConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PrivacyConnectionQueryVariables, query: string}, PrivacyConnectionQueryVariables>(PrivacyConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  