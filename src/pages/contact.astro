---
import PageHeader from "@components/PageHeader.astro";
import Layout from '@layouts/Layout.astro';
import { markdownify } from "@src/utils/textConverter";

import { getEntry } from 'astro:content';
const contactPage = await getEntry("pages", "contact");

if (!contactPage || contactPage?.data.draft) {
  const res = new Response(null, { status: 404, });
  res.headers.append("content-type", "text/html")
  return res;
}

const { title, metadata, contact_form } : any = contactPage?.data;
const contact_form_description = await markdownify(contact_form.description);
const contact_info_title = await markdownify(contact_form.contact_info_title);
---

<Layout
  title={title}
  meta_title={metadata.title}
  description={metadata.description} 
  image={metadata.image} 
  author={metadata.author} 
  keywords={metadata.keywords} 
  noindex={metadata.noindex} 
  canonical={metadata.canonical}
>
  <PageHeader title={title} />

	<section>
    <div class="container">
      <div class="row gy-5 lg:gx-6 justify-center">
        <div class="lg:col-5 md:col-10 lg:ms-auto lg:me-0 me-auto">
          <div class="mb-8">
            <h2 class="h3 mb-3">{contact_form.title ?? ""}</h2>
            <div class="text-balance" set:html={contact_form_description ?? ""} />
          </div>
          <div>
            <h3 class="h5 mb-5" set:html={contact_info_title ?? ""} />
            <p class="mb-2 flex items-center gap-x-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M12 18h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v7.5"></path><path d="M3 6l9 6l9 -6"></path><path d="M15 18h6"></path><path d="M18 15l3 3l-3 3"></path></svg>
              <a class="underline hover:text-primary" href={`mailto:${contact_form.email_address}`}>
                {contact_form.email_address}
              </a>
            </p>
          </div>
        </div>

        <div class="lg:col-5 lg:me-auto lg:ms-0 ms-auto">
          <h2 class="h3 mb-4">Contact form</h2>

          <form
            method="POST"
            id="contact-form"
            class="flex flex-col gap-5"
          >
            <textarea
              class="w-full bg-white dark:bg-dark-dark rounded-lg p-4 border border-black/15 dark:border-[#3c4352] hover:border-primary"
              placeholder="Ask question or just say Hi"
              rows="4"
              name="message"
              required
            ></textarea>
            
            <input
              type="email"
              class="w-full bg-white dark:bg-dark-dark rounded-lg p-4 border border-black/15 dark:border-[#3c4352] hover:border-primary"
              placeholder="Email address"
              name="email"
              required
            />
            
            <input
              type="text"
              class="w-full bg-white dark:bg-dark-dark rounded-lg p-4 border border-black/15 dark:border-[#3c4352] hover:border-primary"
              placeholder="Your name here"
              name="name"
              required
            />
            
            <button
              type="submit"
              class="btn btn-primary gap-x-2 mt-2 w-fit"
              aria-label="Send Message"
            >
              {contact_form.form_button_text ?? "Send"}
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M15 10l-4 4l6 6l4 -16l-18 7l4 2l2 6l3 -4"></path></svg>
            </button>

            <div class="status empty:hidden py-2 px-3 rounded-md text-white font-medium text-sm"></div>
          </form>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const contactFormRef = document.getElementById("contact-form") as HTMLFormElement | null;

if (contactFormRef !== null) {
  const submitBtnRef = contactFormRef.querySelector("button[type='submit']") as HTMLButtonElement | null;
  const submitBtnTextRef = submitBtnRef?.innerHTML;
  const statusRef = contactFormRef.querySelector(".status") as HTMLElement | null;
  const emailAddress = "respond@edwarddeaver.me";
  const formsubmitURL = `https://formsubmit.co/ajax/${emailAddress}`;

  const formHandler = (e: Event): void => {
    e.preventDefault();

    if (submitBtnRef) {
      submitBtnRef.innerHTML = "Sending..";
    }

    // Ensure these fields exist before trying to access their values
    const nameInput = document.querySelector('[name="name"]') as HTMLInputElement | null;
    const emailInput = document.querySelector('[name="email"]') as HTMLInputElement | null;
    const messageInput = document.querySelector('[name="message"]') as HTMLInputElement | null;

    const name = nameInput?.value;
    const email = emailInput?.value;
    const message = messageInput?.value;

    fetch(formsubmitURL, {
      method: "POST",
      headers: { "Content-type": "application/json" },
      body: JSON.stringify({
        _subject: "Message form Qurno Astro!",
        name: name,
        email: email,
        message: message,
      }),
    })
      .then((response) => response.json())
      .then(() => {
        if (statusRef) {
          statusRef.style.backgroundColor = "#17a34a";
          statusRef.innerHTML = "Message sent successfully!";
          if (submitBtnTextRef && submitBtnRef) {
            submitBtnRef.innerHTML = submitBtnTextRef;
          }
          if (e.target instanceof HTMLFormElement) {
            e.target.reset();
          }
        }
      })
      .catch(() => {
        if (statusRef) {
          statusRef.style.backgroundColor = "#dc2625";
          statusRef.innerHTML = "Something went wrong!";
        }
      });
  };

  contactFormRef.addEventListener("submit", formHandler);
}

  });
</script>