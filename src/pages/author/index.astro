---
import { slugify } from "@src/utils/textConverter";

import AstroImage from "@components/helpers/AstroImage.astro";
import PageHeader from "@components/PageHeader.astro";
import Layout from '@layouts/Layout.astro';

import BlogCard from "@components/BlogCard.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection, getEntry } from 'astro:content';

const allAuthors: CollectionEntry<"author">[] = await getCollection("author");
const allPosts: CollectionEntry<"blog">[] = (await getCollection("blog")).sort(
  (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
    b.data.date.valueOf() - a.data.date.valueOf()
);

const authorPage = await getEntry("pages", "author");

if (!authorPage || authorPage?.data.draft) {
  const res = new Response(null, { status: 404, });
  res.headers.append("content-type", "text/html")
  return res;
}

const { title, metadata, recent_posts } : any = authorPage?.data;

// count the number of posts written by each author
const authorCounts: Record<string, number> = allAuthors.reduce((counts, author) => {
  const count = allPosts.filter((post) => post.data.author === author.data.title).length;
  return { ...counts, [author.data.title]: count > 0 ? (count > 9 ? count : "0" + count) : 0 };
}, {});

// sort author by number of posts
const sortedAuthors = allAuthors.sort((a, b) => authorCounts[b.data.title] - authorCounts[a.data.title]);
---

<Layout
  title={title}
  meta_title={metadata.title}
  description={metadata.description} 
  image={metadata.image} 
  author={metadata.author} 
  keywords={metadata.keywords} 
  noindex={metadata.noindex} 
  canonical={metadata.canonical}
>
  <PageHeader title={title} />

  <section>
    <div class="container">
      <div class="row gy-5 row-cols-2 sm:row-cols-3 lg:row-cols-4 justify-center">
        {sortedAuthors.map((author) => (
          <a class="inline-block group text-center" href={"/author/" + slugify(author.slug)}>
            <AstroImage
              class="max-w-full transition-all duration-300 group-hover:opacity-75 h-20 sm:h-24 md:h-32 w-20 sm:w-24 md:w-32 rounded-clip mx-auto bg-white"
              src={author.data.image}
              alt={author.data.title}
              width={112}
              height={112}
            />
            
            <h4 class="text-dark mt-3 sm:mt-4 mb-1">{author.data.title}</h4>
            <p class="font-medium mb-2 text-[#505050] dark:text-gray-dark">{author.data.subtitle}</p>
            <p class="text-sm mb-0 leading-tight"><span class="font-semibold">{authorCounts[author.data.title]}</span> Published posts</p>
          </a>
        ))}
      </div>
    </div>
  </section>
  
  {recent_posts?.enable && (  
    <section class="section-sm pb-0 bg-section">
      <div class="container section-sm pb-0">
        <h2 class="section-title text-center">
          <span>{recent_posts.title}</span>
        </h2>
        <div class="row gy-6 gx-1">
          
          {allPosts.slice(0, recent_posts.visible_posts_count).map((post) => (
            <div class="lg:col-6 xl:col-4">
              <BlogCard post={post} allAuthors={allAuthors} variant="sm" />
            </div>
          ))}

          <div class="col-12 text-center">
            <a class="btn btn-primary mt-8 capitalize" href="/blog" aria-label="View all posts">
              <svg class="me-1" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentcolor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M9 12h6"></path><path d="M12 9v6"></path><path d="M4 6V5a1 1 0 011-1h1m5 0h2m5 0h1a1 1 0 011 1v1m0 5v2m0 5v1a1 1 0 01-1 1h-1m-5 0h-2m-5 0H5a1 1 0 01-1-1v-1m0-5v-2m0-5"></path></svg>
              {recent_posts.button_label}
            </a>
          </div>
        </div>
      </div>
    </section>
  )}
</Layout>